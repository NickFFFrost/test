//Получаем html элементы, присваиваем им переменные

var btn1 = document.getElementById("btn1"); //Метод getElementById позволяет получить элемент (тег) страницы по его атрибуту id. С полученным элементом можно будет производить различные манипуляции: менять его текст, атрибуты, css стили и так далее.
var btn2 = document.getElementById("btn2"); //Метод getElementById позволяет получить элемент (тег) страницы по его атрибуту id. С полученным элементом можно будет производить различные манипуляции: менять его текст, атрибуты, css стили и так далее.
var main = document.getElementById("main"); //Метод getElementById позволяет получить элемент (тег) страницы по его атрибуту id. С полученным элементом можно будет производить различные манипуляции: менять его текст, атрибуты, css стили и так далее.
var myList = document.getElementById("list"); //Метод getElementById позволяет получить элемент (тег) страницы по его атрибуту id. С полученным элементом можно будет производить различные манипуляции: менять его текст, атрибуты, css стили и так далее.
var ul = document.getElementsByTagName("ul"); //Метод getElementsByTagName позволяет получить элементы страницы по имени тега.С полученными элементами можно производить различные манипуляции: менять их текст, атрибуты, CSS стили и так далее.Метод возвращает псевдомассив элементов, а не один элемент, поэтому по этому набору сначала нужно пройтись циклом и для каждого элемента сделать то, что вам нужно.
var story = myList.getElementsByClassName("item"); //Метод getElementsByClassName позволяет получить элементы страницы по их классу в атрибуте class.С полученными элементами можно будет производить различные манипуляции: менять их текст, атрибуты, css стили и так далее.Метод возвращает массив элементов, а не один элемент, поэтому по этому набору сначала нужно пройтись циклом и для каждого элемента сделать то, что вам нужно.
var popup = document.getElementsByClassName("popup")[0]; //Метод getElementsByClassName позволяет получить элементы страницы по их классу в атрибуте class.С полученными элементами можно будет производить различные манипуляции: менять их текст, атрибуты, css стили и так далее.Метод возвращает массив элементов, а не один элемент, поэтому по этому набору сначала нужно пройтись циклом и для каждого элемента сделать то, что вам нужно.
var close = document.querySelector(".close");//Метод querySelector позволяет получить элемент (тег) страницы по произвольному селектору CSS.Чтобы получить элемент с заданным id, нужно написать #его_id, с заданным классом - .его_класс и так далее - любой селектор.С полученным элементом можно будет производить различные манипуляции: менять его текст, атрибуты, css стили и так далее.

// Вывод переменных в консоль. для тестинга, получилось ли получить элемент со стр
console.log(btn1);
console.log(btn2);
console.log(ul);
console.log(story);

//функция добавления новых элементов li
function addItem(){
  var newLi = document.createElement("li");
  newLi.innerHTML = "Новая задача!";
  newLi.className = "item";
  myList.appendChild(newLi);
  popup.style.display = "none";
}
/*
Метод createElement позволяет создать новый элемент, передав в параметре имя тега. После создания с элементом можно работать как с обычным элементом, 
а также его можно добавить на страницу (например методом appendChild).Если записать результат работы createElement в переменную, то в этой переменной 
будет такой элемент, как будто бы мы получили его через getElementById.Единственное отличие - наш элемент не будет размещен на странице. 
А так мы можем менять ему innerHTML, атрибуты, навешивать обработчики событий и в конце концов разместить его на странице.

Метод appendChild позволяет вставить в конец элемента переданный элемент. Чаще всего используется после создания элемента с помощью createElement.

*/

//функция удаление елементов li
function delItem(){
  myList.removeChild(story[0]);

  if(story.length == 0){
    popup.style.display = "block";
  }
}

/*
Метод removeChild позволяет удалить элемент. Применяется к родительскому элементу с указанием элемента, который нужно удалить.
*/

//функция закрытие модального окна по нажатию на крестик
function closePopup(){
  popup.style.display = "none";
}

//привязываем события элементам
btn1.addEventListener("click", addItem);
btn2.addEventListener("click", delItem);
close.addEventListener("click", closePopup);

/*
Метод addEventListener позволяет назначить на элемент обработчики событий (таких как click, keyup и др.).
С его помощью, можно указать, например, что делать при клике по кнопке, или что делать при наборе текста в текстовом поле.
*/